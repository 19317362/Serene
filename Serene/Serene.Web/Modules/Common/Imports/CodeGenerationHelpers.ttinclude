<#@ assembly name="System.Core"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="EnvDTE80" 
#><#@ assembly name="VSLangProj" 
#><#@ assembly name="$(TargetDir)Serenity.Core.dll"
#><#@ assembly name="$(TargetDir)Serenity.Web.dll" 
#><#@ assembly name="$(ProjectDir)tools\Mono.Cecil\Mono.Cecil.dll" 
#><#@ import namespace="System.Linq" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating" 
#><#@ import namespace="Serenity.CodeGeneration" 
#><#
#><#+

public class SSTypeLister
{
    private List<Mono.Cecil.AssemblyDefinition> assemblyDefinitions;

    public SSTypeLister(params string[] assemblies)
    {
        if (assemblies == null)
            throw new ArgumentNullException("assemblies");

        var resolver = new Mono.Cecil.DefaultAssemblyResolver();

        foreach (var assembly in assemblies)
            resolver.AddSearchDirectory(Path.GetDirectoryName(assembly));

        assemblyDefinitions = new List<Mono.Cecil.AssemblyDefinition>();
        foreach (var assembly in assemblies)
            assemblyDefinitions.Add(Mono.Cecil.AssemblyDefinition.ReadAssembly(
                assembly, new Mono.Cecil.ReaderParameters { AssemblyResolver = resolver }));
    }
    
    private List<Mono.Cecil.TypeDefinition> GetAllBaseTypes(Mono.Cecil.TypeDefinition type)
    {
        var result = new List<Mono.Cecil.TypeDefinition>();

        while (type.BaseType != null &&
            !type.BaseType.Namespace.StartsWith("System"))
        {
            type = type.BaseType.Resolve();
            result.Add(type);
        }

        return result;
    }
    
    public List<ExternalType> List()
    {
        var result = new List<ExternalType>();
        
        foreach (var assembly in this.assemblyDefinitions)
        {
            var assemblyName = assembly.Name.Name;
            foreach (var module in assembly.Modules)
            {
                foreach (var type in module.Types)
                {
                    if (!type.IsPublic)
                        continue;
                    
                    var typeInfo = new ExternalType
                    {
                        AssemblyName = assemblyName,
                        Namespace = type.Namespace,
                        Name = type.Name,
                        IsAbstract = type.IsAbstract,
                        HasGenericParameters = type.HasGenericParameters,
                        BaseType = type.BaseType != null ? type.BaseType.FullName : ""
                    };

                    result.Add(typeInfo);
                }
            }
        }
        
        return result;
    }
}

#>